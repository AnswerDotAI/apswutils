"""Extensions to improve what apswutils can do"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/ext.ipynb.

# %% auto 0
__all__ = ['AttrDictRowFactory']

# %% ../nbs/ext.ipynb
from fastcore.basics import AttrDict

# %% ../nbs/ext.ipynb
class AttrDictRowFactory:
    """Returns each row as a :mod:`dataclass <dataclasses>`, accessible by column name.

    To use set an instance as :attr:`Connection.row_trace
    <apsw.Connection.row_trace>` to affect all :class:`cursors
    <apsw.Cursor>`, or on a specific cursor::

        connection.row_trace = apsw.ext.AttrDictRowFactory()
        for row in connection.execute("SELECT title, sum(orders) AS total, ..."):
            # You can now access by attribute
            print(row.title, row.total)
            # You can now access by dict notation
            print(row['title'], row['total'])
            # Equality is as if rows were dicts
            assert row == {'title': 'AnswerDotAI', 'total': 8000000}

    You can use as many instances of this class as you want, each across as many
    :class:`connections <apsw.Connection>` as you want.
    """

    def __call__(self, cursor, row) -> AttrDict:
        """What the row tracer calls

        Returns an AttrDict representation of each row
        """
        columns = [d[0] for d in cursor.get_description()]
        return AttrDict(dict(zip(columns, row)))
